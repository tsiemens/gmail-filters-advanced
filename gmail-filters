#!/usr/bin/env python2
import json
import os
import re
import sys
import xml.dom.minidom as minidom
import xml.etree.ElementTree as ET

"""
Config file example:

{
   "foo@bar.com": {
      "alias": "foo",
      "author": "John Doe",
      "filters": {
         "from_bla": {
            "filter": "from:bla@bla.com",
         },
         "from_bob": {
            "filter": "from:bob@bla.com",
         },
         "from_bob_or_bla": {
            "extras": "from_bla OR from_bob"
         },
         "from_bob_and_bla": {
            "extras": "from_bla AND from_bob"
         }
      },
      "actions": [
         {
            "filters": [ "from_bla" ],
            "archive": true,
            "markRead": true,
            "label": "FromBla",
            "categorize": "Updates",
            "star": true,
            "important": "always|never"
         },
         {
            "filters": [
               "from_bla AND -from_bob",
               "from_bob_and_bla"
               ],
            "archive": true,
            "label": "ignore"
         }
      ]
   }
}
"""

CONFIG_FNAME = os.path.join( os.environ[ 'HOME' ], '.gmail_filters.json' )

categories = {
      'updates': '^smartlabel_notification',
      'forums': '^smartlabel_group',
      'personal': '^smartlabel_personal',
      'social': '^smartlabel_social',
      'promotions': '^smartlabel_promo',
   }

boolstrings = {
      True: 'true',
      False: 'false'
   }

markImportantKeys = {
      'always': 'shouldAlwaysMarkAsImportant',
      'never': 'shouldNeverMarkAsImportant'
   }

def parensWrap( string ):
   """Wrap string in parenthesis. If it is already wrapped in parens, do nothing."""
   string = string.strip()
   if len( string ) > 1 and string[ 0 ] == '(' and string[ -1 ] == ')':
      parens = 1
      for i, c in enumerate( string[ 1: ] ):
         if c == ')':
            parens -= 1
         elif c == '(':
            parens += 1

         if parens == 0:
            if i == len( string ) - 2:
               # This is the last character and it closes the first parens
               return string
            break

   return '(%s)' % string

class ConfigHelper( object ):
   def __init__( self, fname, account ):
      self.filename = fname
      f = open( fname )
      self.config = json.loads( f.read() )
      self.account = self.findAccountKey( account )
      self.verify()

   def verify( self ):
      for account, accountInfo in self.config.iteritems():
         for key, filter_ in accountInfo[ 'filters' ].iteritems():
            assert re.match( '^\w+$', key ) is not None

   def findAccountKey( self, account ):
      foundConfigs = []
      for email, conf in self.config.iteritems():
         if email == account:
            foundConfigs.append( email )
         elif conf.get( 'alias' ) == account:
            foundConfigs.append( email )

      if len( foundConfigs ) > 1:
         raise KeyError( 'Found multiple matches for %s' % account )
      if len( foundConfigs ) == 0:
         raise KeyError( 'No matches for %s' % account )
      return foundConfigs[ 0 ]

   def accountFilters( self ):
      return self.config[ self.account ]

   def expandFilterRefs( self, refFilterStr ):
      parts = re.split( r'\b(\w+)\b', refFilterStr )
      keywords = [ 'AND', 'OR' ]
      for i in range( len( parts ) ):
         if re.match( '^\w+$',  parts[ i ] ) and parts[ i ] not in keywords:
            parts[ i ] = self.filterString( parts[ i ] )

      return ''.join( parts )

   def filterString( self, rootFilterName ):
      filterObj = self.accountFilters()[ 'filters' ][ rootFilterName ]
      assert( set( filterObj.keys() ).issubset( set( [ 'filter', 'extras' ] ) ) )

      filterString = filterObj.get( 'filter', '' )
      if filterString:
         filterString = parensWrap( filterString )

      extrasString = ''
      if 'extras' in filterObj:
         extrasString = ' ' + self.expandFilterRefs( filterObj[ 'extras' ] )

      return parensWrap( filterString + extrasString )

   def createEntries( self, filterAction ):
      def addProperty( entry, name, val ):
         prop = ET.SubElement( entry, 'apps:property' )
         prop.set( 'name', name )
         prop.set( 'value', val )

      permittedAttrs = set( [ 'filters', 'archive', 'markRead', 'label',
                              'categorize', 'star', 'important' ] )
      assert set( filterAction.keys() ).issubset( permittedAttrs ), \
              "%s is not a subset of %s" % ( filterAction.keys(), permittedAttrs )

      filters = filterAction[ 'filters' ]
      assert isinstance( filters, list ), "filters is a %s" % type( filters )

      entries = []
      for fs in filters:
         entry = ET.Element( 'entry' )
         category = ET.SubElement( entry, 'category' )
         category.set( 'term', 'filter' )

         filterString = self.expandFilterRefs( fs )
         addProperty( entry, 'hasTheWord', filterString )

         if 'archive' in filterAction:
            addProperty( entry, 'shouldArchive',
                         boolstrings[ filterAction[ 'archive' ] ] )

         if 'markRead' in filterAction:
            addProperty( entry, 'shouldMarkAsRead',
                         boolstrings[ filterAction[ 'markRead' ] ] )

         if 'label' in filterAction:
            addProperty( entry, 'label', filterAction[ 'label' ] )

         if 'categorize' in filterAction:
            addProperty( entry, 'smartLabelToApply',
                         categories[ filterAction[ 'categorize' ] ] )

         if 'star' in filterAction:
            addProperty( entry, 'shouldStar', boolstrings[ filterAction[ 'star' ] ] )

         if 'important' in filterAction:
            addProperty( entry, markImportantKeys[ filterAction[ 'important' ] ],
                         'true' )

         addProperty( entry, 'sizeOperator', 's_sl' )
         addProperty( entry, 'sizeUnit', 's_smb' )

         entries.append( entry )

      return entries

   def toXml( self ):
      root = ET.Element( 'feed' )
      root.set( 'xmlns', 'http://www.w3.org/2005/Atom' )
      root.set( 'xmlns:apps', 'http://schemas.google.com/apps/2006' )
      author = ET.SubElement( root, 'author' )
      ET.SubElement( author, 'name' ).text = self.accountFilters().get( 'author' )
      for filterAction in self.accountFilters()[ 'actions' ]:
         root.extend( self.createEntries( filterAction ) )

      reparsed = minidom.parseString( ET.tostring( root ) )
      return reparsed.toprettyxml( indent="  ", encoding='UTF-8' )

def main():
   if len( sys.argv ) < 2:
      print "usage: gmail-filters accountname"
      exit( 1 )
   account = sys.argv[ 1 ]
   try:
      ch = ConfigHelper( CONFIG_FNAME, account )
      print ch.toXml()
   except IOError, e:
      print str( e )
      exit( 1 )

if __name__ == '__main__':
   main()
