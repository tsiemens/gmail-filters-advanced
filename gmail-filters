#!/usr/bin/env python3

import argparse
import copy
import re
import sys

import colors

from GmailFilters import parse_filter_element
import GmailFilters.Api as Api
from GmailFilters.Template import update_all_meta_groups, \
                                  TemplateError

assert sys.version_info[ 0 ] == 3, "Script requires python 3"

args = None

CRITERIA = set([
   'from',
   'hasAttachment',
   'subject',
   'sizeComparison',
   'to',
   'query',
   'excludeChats',
   'negatedQuery',
   'size',
])

def print_v( *prArgs, **prKwargs ):
   if args.verbose:
      print( *prArgs, **prKwargs )

def maybe_color( msg, fg=None, style=None ):
   if not args.no_color:
      return colors.color( msg, fg=fg, style=style )

   return msg

def check_with_user( msg, requireLongConfirm=False ):
   if args.assumeyes or args.dry_run:
      return True
   if requireLongConfirm:
      while True:
         inp = input( "%s (No/yes): " % msg ).strip()
         if inp and inp[ 0 ].lower() == 'y':
            if inp.lower() == 'yes':
               return True
            print( "Whole word 'yes' is required" )
         else:
            return False
   else:
      inp = input( "%s (N/y): " % msg ).strip()
      return inp and inp[ 0 ].lower() == 'y'

def get_auth_http():
   return Api.get_auth_http( args )

def get_service():
   http = get_auth_http()
   service = Api.Service( http, dryWrites=args.dry_run )
   emailAddr = service.get_email_addr()

   if args.assert_email:
      if args.assert_email != emailAddr:
         print( "Authorized account for %s did not match %s" %
                ( emailAddr, args.assert_email ) )
   else:
      print_v( "Account email: %s" % service.get_email_addr() )

   return service

def auth_cmd():
   get_auth_http()

def list_cmd():
   service = get_service()
   printer = Api.Printer( service, not args.no_color )
   filters = service.get_filters()
   if not filters:
      print_v( 'No filters found.' )
   else:
      try:
         for filter_ in filters:
            if args.search_regexp is not None:
               if not re.search( args.search_regexp, repr( filter_ ) ):
                  continue
            printer.print_filter( filter_ )
            print( '' )
      except re.error as e:
         print( 'regex error: ' + str( e ) )

def replace_cmd():
   service = get_service()
   printer = Api.Printer( service, not args.no_color )
   filters = service.get_filters()
   if not filters:
      filters = []

   matchedFilters = []
   replaceFilters = []

   for filter_ in filters:
      field = filter_[ 'criteria' ].get( args.field, '' )
      m = re.search( args.search_regexp, field )
      if m:
         matchedFilters.append( filter_ )

         newFilter = copy.deepcopy( filter_ )
         newFilter[ 'criteria' ][ args.field ] = re.sub( args.search_regexp,
                                                         args.sub_pattern, field )
         replaceFilters.append( newFilter )

   if not replaceFilters:
      print_v( "No changes will be made" )
      return 0

   print( maybe_color( "Replacements to be done:", style='bold' ) )
   for newFilter, oldFilter in zip( replaceFilters, matchedFilters ):
      printer.print_filter( oldFilter, newFilter=newFilter )
      print( "" )

   if check_with_user( "Make these changes?",
                       requireLongConfirm=len( replaceFilters ) > 1 ):
      for filter_ in replaceFilters:
         id_ = filter_[ 'id' ]
         service.create_filter( filter_ )
         service.delete_filter( id_ )

def update_cmd():
   service = get_service()
   printer = Api.Printer( service, not args.no_color )
   filters = service.get_filters()
   if not filters:
      filters = []

   oldFiltersById = {}

   updatedFilterQueryElems = {}
   for filter_ in filters:
      oldFiltersById[ filter_[ 'id' ] ] = filter_
      filterStr = filter_[ 'criteria' ].get( 'query' )
      if filterStr is not None:
         filterElems = parse_filter_element( filterStr )
         updatedFilterQueryElems[ filter_[ 'id' ] ] = filterElems

   try:
      update_all_meta_groups( updatedFilterQueryElems )
   except TemplateError as e:
      print( "Template error: " + str( e ) )

   updatedFilters = {}
   hasPrintedHeader = False
   for id_, filterQElem in updatedFilterQueryElems.items():
      oldFilter = oldFiltersById[ id_ ]
      newQuery = filterQElem.full_filter_str()
      if newQuery != oldFilter[ 'criteria' ][ 'query' ]:
         if not hasPrintedHeader:
            print( maybe_color( "Updated to be done:", style='bold' ) )
            hasPrintedHeader = True

         updatedFilter = copy.deepcopy( oldFiltersById[ id_ ] )
         updatedFilter[ 'criteria' ][ 'query' ] = newQuery
         updatedFilters[ id_ ] = updatedFilter
         printer.print_filter( oldFilter, newFilter=updatedFilter )
         print( "" )

   if not updatedFilters:
      print_v( "No updates to be made" )
      return 0

   if check_with_user( "Make these changes?",
                       requireLongConfirm=len( updatedFilters ) > 1 ):
      for id_, filter_ in updatedFilters.items():
         service.create_filter( filter_ )
         service.delete_filter( id_ )

def main():
   """Shows basic usage of the Gmail API.

   Creates a Gmail API service object and outputs a list of filters
   of the user's Gmail account.
   """
   # Global cmd options
   cmdParserBase = Api.new_argparser_base( addHelp=False )
   cmdParserBase.add_argument( '--assert-email', metavar='EMAIL_ADDR',
                                help="Check that the authorized account matches "
                                     "this email address, before taking any "
                                     "action." )
   cmdParserBase.add_argument( '--dry-run', action='store_true',
                               help="Do not perform any actual updates. "
                                    "Just echo what would happen." )
   cmdParserBase.add_argument( '--verbose', '-v', action='store_true',
                               help="Print verbose output" )
   cmdParserBase.add_argument( '--no-color', action='store_true',
                               help="Do not use ANSII colors in output" )
   cmdParserBase.add_argument( '--assumeyes', '-y', action='store_true',
                               help="Answer yes to all prompts." )

   parser = argparse.ArgumentParser()
   cmdParser = parser.add_subparsers( title='command', dest='command' )
   cmdParser.required = True
   # Auth
   authParser = cmdParser.add_parser( 'authorize', aliases=[ 'auth' ],
                                      parents=[ cmdParserBase ],
                                      help="Just set up the authentication of this "
                                           "tool with a Google account" )
   authParser.set_defaults( func=auth_cmd )

   # List
   listParser = cmdParser.add_parser( 'list', aliases=[ 'ls' ],
                                      parents=[ cmdParserBase ],
                                      help="List Gmail filters" )
   listParser.set_defaults( func=list_cmd )
   listParser.add_argument( 'search_regexp', nargs='?',
                            help="Limit listed filters to ones that match this "
                                 "pattern" )

   # Update
   updateParser = cmdParser.add_parser( 'update', parents=[ cmdParserBase ],
                                        help="Update help" )
   updateParser.set_defaults( func=update_cmd )

   # Replace parser
   replaceParser = cmdParser.add_parser( 'replace', parents=[ cmdParserBase ],
                                         help="Replace help" )
   replaceParser.set_defaults( func=replace_cmd )
   replaceParser.add_argument( 'search_regexp' )
   replaceParser.add_argument( 'sub_pattern' )
   replaceParser.add_argument( '--field', '-f', default='query', choices=CRITERIA,
                               help='The field to run the replace on.' )

   global args
   args = parser.parse_args()

   return args.func()

if __name__ == '__main__':
   exit( main() )
