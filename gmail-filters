#!/usr/bin/env python2
import json
import os
import sys
import xml.dom.minidom as minidom
import xml.etree.ElementTree as ET

"""
Config file example:

{
   "foo@bar.com": {
      "alias": "foo",
      "author": "John Doe",
      "filters": {
         "from_bla": {
            "filter": "from:bla@bla.com",
         },
         "from_bob": {
            "filter": "from:bob@bla.com",
         },
         "from_bob_or_bla": {
            "or": [ "from_bla", "from_bob" ]
         },
         "from_bob_and_bla": {
            "and": [ "from_bla", "from_bob" ]
         }
      },
      "actions": [
         {
            "filters": [ "from_bla" ],
            "archive": true,
            "markRead": true,
            "label": "FromBla",
            "categorize": "Updates",
            "star": true,
            "important": "always|never"
         }
      ]
   }
}
"""
CONFIG_FNAME = os.path.join( os.environ[ 'HOME' ], '.gmail_filters.json' )

HEADER = "<?xml version='1.0' encoding='UTF-8'?>"

def parensWrap( string ):
   string = string.strip()
   if len( string ) > 1 and string[ 0 ] == '(' and string[ -1 ] == ')':
      parens = 1
      for i, c in enumerate( string[ 1: ] ):
         if c == ')':
            parens -= 1
         elif c == '(':
            parens += 1

         if parens == 0:
            if i == len( string ) - 2:
               # This is the last character and it closes the first parens
               return string
         break

   return '(%s)' % string

class ConfigHelper( object ):
   def __init__( self, fname, account ):
      self.filename = fname
      f = open( fname )
      self.config = json.loads( f.read() )
      self.account = self.findAccountKey( account )

   def findAccountKey( self, account ):
      foundConfigs = []
      for email, conf in self.config.iteritems():
         if email == account:
            foundConfigs.append( email )
         elif conf.get( 'alias' ) == account:
            foundConfigs.append( email )

      if len( foundConfigs ) > 1:
         raise KeyError( 'Found multiple matches for %s' % account )
      if len( foundConfigs ) == 0:
         raise KeyError( 'No matches for %s' % account )
      return foundConfigs[ 0 ]

   def accountFilters( self ):
      return self.config[ self.account ]

   def filterString( self, rootFilterName ):
      filterObj = self.accountFilters()[ 'filters' ][ rootFilterName ]
      filterString = filterObj.get( 'filter' )

      otherFilters = None
      otherFiltersJoiner = None
      if 'or' in filterObj:
         assert 'and' not in filterObj
         otherFilters = [ self.filterString( f ) for f in filterObj[ 'or' ] ]
         otherFiltersJoiner = ' OR '
      elif 'and' in filterObj:
         otherFilters = [ self.filterString( f ) for f in filterObj[ 'and' ] ]
         otherFiltersJoiner = ' AND '

      if otherFilters:
         assert otherFiltersJoiner
         filterString = otherFiltersJoiner.join(
               [ parensWrap( fs ) for fs in [ filterString ] + otherFilters ] )

      return filterString

   def createEntry( self, filterAction ):
      entry = ET.Element( 'entry' )
      category = ET.SubElement( entry, 'category' )
      category.set( 'term', 'filter' )

      def addProperty( name, val ):
         prop = ET.SubElement( entry, 'apps:property' )
         prop.set( 'name', name )
         prop.set( 'value', val )

      filters = filterAction[ 'filters' ]
      filterString = ' AND '.join(
            [ parensWrap( self.filterString( fs ) ) for fs in filters ] )
      addProperty( 'hasTheWord', filterString )

      if 'archive' in filterAction:
         pass
      if 'markRead' in filterAction:
         pass
      if 'label' in filterAction:
         pass
      if 'categorize' in filterAction:
         pass
      if 'star' in filterAction:
         pass
      if 'important' in filterAction:
         pass

      addProperty( 'sizeOperator', 's_sl' )
      addProperty( 'sizeUnit', 's_smb' )
      return entry

   def toXml( self ):
      root = ET.Element( 'feed' )
      root.set( 'xmlns', 'http://www.w3.org/2005/Atom' )
      root.set( 'xmlns:apps', 'http://schemas.google.com/apps/2006' )
      author = ET.SubElement( root, 'author' )
      ET.SubElement( author, 'name' ).text = self.accountFilters().get( 'author' )
      for filterAction in self.accountFilters()[ 'actions' ]:
         root.append( self.createEntry( filterAction ) )

      reparsed = minidom.parseString( ET.tostring( root ) )
      return HEADER + reparsed.toprettyxml( indent="  " )

def main():
   account = sys.argv[ 1 ]
   try:
      ch = ConfigHelper( CONFIG_FNAME, account )
      print ch.account
      print ch.toXml()
   except IOError, e:
      print str( e )
      exit( 1 )

if __name__ == '__main__':
   main()
